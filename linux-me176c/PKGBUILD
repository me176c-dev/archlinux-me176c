# $Id$
# Maintainer: lambdadroid <lambdadroid@gmail.com>

#pkgbase=linux               # Build stock -ARCH kernel
pkgbase=linux-me176c         # Build kernel with a different name
_srcname=linux-4.14
pkgver=4.14.12
pkgrel=4
arch=('x86_64')
url="https://github.com/me176c-dev/me176c-archlinux"
license=('GPL2')
makedepends=('xmlto' 'kmod' 'inetutils' 'bc' 'libelf' 'iasl')
options=('!strip')
source=(
  "https://www.kernel.org/pub/linux/kernel/v4.x/${_srcname}.tar.xz"
  "https://www.kernel.org/pub/linux/kernel/v4.x/${_srcname}.tar.sign"
  "https://www.kernel.org/pub/linux/kernel/v4.x/patch-${pkgver}.xz"
  "https://www.kernel.org/pub/linux/kernel/v4.x/patch-${pkgver}.sign"
  'config'         # the main kernel config file
  '60-linux.hook'  # pacman hook for depmod
  '90-linux.hook'  # pacman hook for initramfs regeneration
  'linux.preset'   # standard config files for mkinitcpio ramdisk
  'git+https://github.com/me176c-dev/me176c-acpi.git#commit=032c89d340794c2d8c7134675802ba9743613e9c'
  '0001-Move-mfd-drivers-up-in-Makefile.patch'
  '0002-ASoC-Intel-Atom-Add-option-to-force-use-of-BYT-CR-BI.patch'
  '0003-ASoC-Intel-bytcr_rt5640-Add-quirks-for-ASUS-MeMO-Pad.patch'
  '0004-iio-accel-kxcjk-1013-Add-the-KXJ2109-ACPI-id.patch'
  '0005-iio-magnetometer-ak8975-Add-the-AKM9911-ACPI-id.patch'
  '0006-x86-Add-support-to-optimize-kernel-for-silvermont-CP.patch'
  '0007-input-misc-Add-ASUS-Lid-Cover-driver.patch'
  '0008-ACPI-tables-Remap-GNVS-operation-region-memory-offse.patch'
  '0009-ASoC-Intel-bytcr_rt5640_jack-Add-Headphone-detection.patch'
  '0010-pinctrl-baytrail-Add-option-to-disable-warnings-abou.patch'
  '0011-media-staging-atomisp-Avoid-using-trace_printk-by-de.patch'
  '0012-platform-x86-Enable-INT0002-Virtual-GPIO-device-on-B.patch'
  '0013-Revert-pinctrl-baytrail-Do-not-add-all-GPIOs-to-IRQ-.patch'
  '0014-Revert-pinctrl-intel-set-default-handler-to-be-handl.patch'
  '0015-Revert-gpio-acpi-Override-GPIO-initialization-flags.patch'
  '0016-PM-Sleep-Add-wake-lock-api-wrapper-on-top-of-wakeup-.patch'
  '0017-intel-mid-Add-compatibility-layer-for-old-intel_mid_.patch'
  '0018-power-supply-Import-ASUS-MeMO-Pad-7-ME176C-battery-c.patch'
  '0019-power-supply-Fix-ASUS-MeMO-Pad-7-ME176C-battery-char.patch'
)
validpgpkeys=(
  'ABAF11C65A2970B130ABE3C479BE3E4300411886'  # Linus Torvalds
  '647F28654894E3BD457199BE38DBBDC86092693E'  # Greg Kroah-Hartman
)
sha256sums=('f81d59477e90a130857ce18dc02f4fbe5725854911db1e7ba770c7cd350f96a7'
            'SKIP'
            'da5d8db44b0988e4c45346899d3f5a51f8bd6c25f14e729615ca9ff9f17bdefd'
            'SKIP'
            '6c28610f28b777edbb0718159f11835d348bdafe5d01959e58bb25d73b1fbd48'
            'ae2e95db94ef7176207c690224169594d49445e04249d2499e9d2fbc117a0b21'
            '75f99f5239e03238f88d1a834c50043ec32b1dc568f2cc291b07d04718483919'
            'ad6344badc91ad0630caacde83f7f9b97276f80d26a20619a87952be65492c65'
            'SKIP'
            '3b8078b9128b3a0ff826c80732f259746387bbb7d18ec57e118fb0dcd3d75dd1'
            '3070f2770cc1676fc741874e5ed0887db71fbdcb775c464a89af5860c7cda9f2'
            'b5215dbdeefd3cf803e31b093a7a21e806da52d356ffcb8222a983dc1992a8af'
            '31c9a55b7deda4506bbf68411ab3ce6768ff567ad18b139fa01e5445da73feb4'
            '6e977c97497f8f519de15de6e02f2a859648ec96b24a188cd974661b22a1c67d'
            'c9dff77b9e5a2a16696e69218a7644c600110f8ef84b19efef9572d8cfa9bc4b'
            '96a8baafe6a0d2735e5f3c4ca7e96c6cbe5088020f59e4f35fbc9ad1d3abe262'
            '1c77ca58b3505a82bde6bc6495d8d70256e4303762da0ceb3d17322f4750595b'
            '2f96d294be0276e6388f23a7310180fd0723a1aa69d5c776e221a4be212df8d5'
            'efa20e85c23d07de91b8bc221dde98b58f25354b593e6a5712aa4f4d9b9c69d9'
            '32a2279d30f59b793d0314ddb38a59600fde600e2e37388809d7edff70df5760'
            '40a382972dc3811f9e2ebfbd3d1fece9c6105dfac0852984cdbb42adb9cd14fe'
            'b112ed90c846645a027e3caae69973ebf3a7d15bdd5eac2f16bad4f9830bb620'
            '9f0091afc0c4cb151c8c2e6ac1928a6297bad61ce4f0623b33bd48edfec9829d'
            '57dea4fa00ebdfc04fa77e6019c99ea4a8327cf6eba271febac15a0c4354efbc'
            '0ba1318d037be87248bcd1d1202ddf82ded9b864256238346df22e86486f9079'
            '7cb3759d0cf2a407865888d3079c281bf3ee6f9f0bb3ce25974d02af877e5322'
            '0457cb4f34f969490eb296eb127d8f7ca484b9dc53aa06d3007f7a2b4a476b1a'
            'd0a6f4cb876404962f21c4e0ff4a5485ca139e724ad7eef4d1a47375c6ac68df')

_kernelname=${pkgbase#linux}

prepare() {
  # Compile ACPI DSDT table
  iasl -tc me176c-acpi/dsdt.dsl

  cd ${_srcname}

  # add upstream patch
  patch -p1 -i ../patch-${pkgver}
  chmod +x tools/objtool/sync-check.sh  # GNU patch doesn't support git-style file mode

  # security patches

  # add latest fixes from stable queue, if needed
  # http://git.kernel.org/?p=linux/kernel/git/stable/stable-queue.git

  # ASUS MeMO Pad 7 (ME176C/CX) patches
  echo ../*.patch | xargs -n1 patch -p1 -i

  cp -Tf ../config .config

  # Append option for custom DSDT table
  echo "CONFIG_ACPI_CUSTOM_DSDT_FILE=\"`realpath ../me176c-acpi/dsdt.hex`\"" >> .config

  # set extraversion to pkgrel
  sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh

  # get kernel version
  make prepare

  # load configuration
  # Configure the kernel. Replace the line below with one of your choice.
  #make menuconfig # CLI menu for configuration
  #make nconfig # new CLI menu for configuration
  #make xconfig # X-based configuration
  #make oldconfig # using old config from previous kernel version
  # ... or manually edit .config

  # rewrite configuration
  yes "" | make config >/dev/null
}

build() {
  cd ${_srcname}

  make ${MAKEFLAGS} LOCALVERSION= bzImage modules
}

_package() {
  pkgdesc="The ${pkgbase/linux/Linux} kernel and modules"
  [ "${pkgbase}" = "linux" ] && groups=('base')
  depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio>=0.7')
  optdepends=('crda: to set the correct wireless channels of your country')
  backup=("etc/mkinitcpio.d/${pkgbase}.preset")
  install=linux.install

  cd ${_srcname}

  # get kernel version
  _kernver="$(make LOCALVERSION= kernelrelease)"
  _basekernel=${_kernver%%-*}
  _basekernel=${_basekernel%.*}

  mkdir -p "${pkgdir}"/{boot,usr/lib/modules}
  make LOCALVERSION= INSTALL_MOD_PATH="${pkgdir}/usr" modules_install
  cp arch/x86/boot/bzImage "${pkgdir}/boot/vmlinuz-${pkgbase}"

  # make room for external modules
  local _extramodules="extramodules-${_basekernel}${_kernelname:--ARCH}"
  ln -s "../${_extramodules}" "${pkgdir}/usr/lib/modules/${_kernver}/extramodules"

  # add real version for building modules and running depmod from hook
  echo "${_kernver}" |
    install -Dm644 /dev/stdin "${pkgdir}/usr/lib/modules/${_extramodules}/version"

  # remove build and source links
  rm "${pkgdir}"/usr/lib/modules/${_kernver}/{source,build}

  # now we call depmod...
  depmod -b "${pkgdir}/usr" -F System.map "${_kernver}"

  # add vmlinux
  install -Dt "${pkgdir}/usr/lib/modules/${_kernver}/build" -m644 vmlinux

  # sed expression for following substitutions
  local _subst="
    s|%PKGBASE%|${pkgbase}|g
    s|%KERNVER%|${_kernver}|g
    s|%EXTRAMODULES%|${_extramodules}|g
  "

  # hack to allow specifying an initially nonexisting install file
  sed "${_subst}" "${startdir}/${install}" > "${startdir}/${install}.pkg"
  true && install=${install}.pkg

  # install mkinitcpio preset file
  sed "${_subst}" ../linux.preset |
    install -Dm644 /dev/stdin "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"

  # install pacman hooks
  sed "${_subst}" ../60-linux.hook |
    install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/60-${pkgbase}.hook"
  sed "${_subst}" ../90-linux.hook |
    install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/90-${pkgbase}.hook"
}

_package-headers() {
  pkgdesc="Header files and scripts for building modules for ${pkgbase/linux/Linux} kernel"

  cd ${_srcname}
  local _builddir="${pkgdir}/usr/lib/modules/${_kernver}/build"

  install -Dt "${_builddir}" -m644 Makefile .config Module.symvers
  install -Dt "${_builddir}/kernel" -m644 kernel/Makefile

  mkdir "${_builddir}/.tmp_versions"

  cp -t "${_builddir}" -a include scripts

  install -Dt "${_builddir}/arch/x86" -m644 arch/x86/Makefile
  install -Dt "${_builddir}/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  cp -t "${_builddir}/arch/x86" -a arch/x86/include

  install -Dt "${_builddir}/drivers/md" -m644 drivers/md/*.h
  install -Dt "${_builddir}/net/mac80211" -m644 net/mac80211/*.h

  # http://bugs.archlinux.org/task/9912
  install -Dt "${_builddir}/drivers/media/dvb-core" -m644 drivers/media/dvb-core/*.h

  # http://bugs.archlinux.org/task/13146
  install -Dt "${_builddir}/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # http://bugs.archlinux.org/task/20402
  install -Dt "${_builddir}/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "${_builddir}/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "${_builddir}/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # add xfs and shmem for aufs building
  mkdir -p "${_builddir}"/{fs/xfs,mm}

  # copy in Kconfig files
  find . -name Kconfig\* -exec install -Dm644 {} "${_builddir}/{}" \;

  # add objtool for external module building and enabled VALIDATION_STACK option
  install -Dt "${_builddir}/tools/objtool" tools/objtool/objtool

  # remove unneeded architectures
  local _arch
  for _arch in "${_builddir}"/arch/*/; do
    [[ ${_arch} == */x86/ ]] && continue
    rm -r "${_arch}"
  done

  # remove files already in linux-docs package
  rm -r "${_builddir}/Documentation"

  # Fix permissions
  chmod -R u=rwX,go=rX "${_builddir}"

  # strip scripts directory
  local _binary _strip
  while read -rd '' _binary; do
    case "$(file -bi "${_binary}")" in
      *application/x-sharedlib*)  _strip="${STRIP_SHARED}"   ;; # Libraries (.so)
      *application/x-archive*)    _strip="${STRIP_STATIC}"   ;; # Libraries (.a)
      *application/x-executable*) _strip="${STRIP_BINARIES}" ;; # Binaries
      *) continue ;;
    esac
    /usr/bin/strip ${_strip} "${_binary}"
  done < <(find "${_builddir}/scripts" -type f -perm -u+w -print0 2>/dev/null)
}

_package-docs() {
  pkgdesc="Kernel hackers manual - HTML documentation that comes with the ${pkgbase/linux/Linux} kernel"

  cd ${_srcname}
  local _builddir="${pkgdir}/usr/lib/modules/${_kernver}/build"

  mkdir -p "${_builddir}"
  cp -t "${_builddir}" -a Documentation

  # Fix permissions
  chmod -R u=rwX,go=rX "${_builddir}"
}

pkgname=("${pkgbase}" "${pkgbase}-headers" "${pkgbase}-docs")
for _p in ${pkgname[@]}; do
  eval "package_${_p}() {
    $(declare -f "_package${_p#${pkgbase}}")
    _package${_p#${pkgbase}}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
