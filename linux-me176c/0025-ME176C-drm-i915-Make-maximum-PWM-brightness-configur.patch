From e28bb9a713e5d0de7266ccec2f2ce88859079959 Mon Sep 17 00:00:00 2001
From: lambdadroid <lambdadroid@gmail.com>
Date: Fri, 9 Feb 2018 14:17:25 +0100
Subject: [PATCH 25/26] ME176C: drm/i915: Make maximum PWM brightness
 configurable

Right now, PWM backlight is exposed as percentage. However, the
PWM device may actually have more backlight levels available. In
some cases, you might want full control over all brightness levels.

Add a module parameter that allows setting the maximum brightness
level that will be used for PWM backlight (set to 100 by default).
---
 drivers/gpu/drm/i915/i915_params.c |  4 ++++
 drivers/gpu/drm/i915/i915_params.h |  1 +
 drivers/gpu/drm/i915/intel_panel.c | 10 +++++-----
 3 files changed, 10 insertions(+), 5 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_params.c b/drivers/gpu/drm/i915/i915_params.c
index 8ab003dca113..0c6b6e2bb4c3 100644
--- a/drivers/gpu/drm/i915/i915_params.c
+++ b/drivers/gpu/drm/i915/i915_params.c
@@ -49,6 +49,7 @@ struct i915_params i915 __read_mostly = {
 	.reset = 2,
 	.error_capture = true,
 	.invert_brightness = 0,
+	.pwm_max_brightness = 100,
 	.disable_display = 0,
 	.enable_cmd_parser = true,
 	.use_mmio_flip = 0,
@@ -191,6 +192,9 @@ MODULE_PARM_DESC(invert_brightness,
 	"to dri-devel@lists.freedesktop.org, if your machine needs it. "
 	"It will then be included in an upcoming module version.");
 
+module_param_named(pwm_max_brightness, i915.pwm_max_brightness, int, 0600);
+MODULE_PARM_DESC(pwm_max_brightness, "Maximum brightness for PWM regulator (default: 100)");
+
 module_param_named(disable_display, i915.disable_display, bool, 0400);
 MODULE_PARM_DESC(disable_display, "Disable display (default: false)");
 
diff --git a/drivers/gpu/drm/i915/i915_params.h b/drivers/gpu/drm/i915/i915_params.h
index ac844709c97e..ae0a2a4f2695 100644
--- a/drivers/gpu/drm/i915/i915_params.h
+++ b/drivers/gpu/drm/i915/i915_params.h
@@ -44,6 +44,7 @@
 	func(int, disable_power_well); \
 	func(int, enable_ips); \
 	func(int, invert_brightness); \
+	func(int, pwm_max_brightness); \
 	func(int, enable_guc_loading); \
 	func(int, enable_guc_submission); \
 	func(int, guc_log_level); \
diff --git a/drivers/gpu/drm/i915/intel_panel.c b/drivers/gpu/drm/i915/intel_panel.c
index 8e0b177d6bba..e8ae6b7e5895 100644
--- a/drivers/gpu/drm/i915/intel_panel.c
+++ b/drivers/gpu/drm/i915/intel_panel.c
@@ -540,7 +540,7 @@ static u32 pwm_get_backlight(struct intel_connector *connector)
 	int duty_ns;
 
 	duty_ns = pwm_get_duty_cycle(panel->backlight.pwm);
-	return DIV_ROUND_UP(duty_ns * 100, CRC_PMIC_PWM_PERIOD_NS);
+	return DIV_ROUND_UP(duty_ns * panel->backlight.max, CRC_PMIC_PWM_PERIOD_NS);
 }
 
 static u32 intel_panel_get_backlight(struct intel_connector *connector)
@@ -632,7 +632,7 @@ static void bxt_set_backlight(const struct drm_connector_state *conn_state, u32
 static void pwm_set_backlight(const struct drm_connector_state *conn_state, u32 level)
 {
 	struct intel_panel *panel = &to_intel_connector(conn_state->connector)->panel;
-	int duty_ns = DIV_ROUND_UP(level * CRC_PMIC_PWM_PERIOD_NS, 100);
+	int duty_ns = DIV_ROUND_UP(level * CRC_PMIC_PWM_PERIOD_NS, panel->backlight.max);
 
 	pwm_config(panel->backlight.pwm, duty_ns, CRC_PMIC_PWM_PERIOD_NS);
 }
@@ -1770,10 +1770,10 @@ static int pwm_setup_backlight(struct intel_connector *connector,
 		return retval;
 	}
 
-	panel->backlight.min = 0; /* 0% */
-	panel->backlight.max = 100; /* 100% */
+	panel->backlight.min = 0;
+	panel->backlight.max = i915.pwm_max_brightness;
 	panel->backlight.level = DIV_ROUND_UP(
-				 pwm_get_duty_cycle(panel->backlight.pwm) * 100,
+				 pwm_get_duty_cycle(panel->backlight.pwm) * panel->backlight.max,
 				 CRC_PMIC_PWM_PERIOD_NS);
 	panel->backlight.enabled = panel->backlight.level != 0;
 
-- 
2.17.1

