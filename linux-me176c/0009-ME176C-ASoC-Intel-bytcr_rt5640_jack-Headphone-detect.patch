From 4289a34623c5e6cb50bc6a855cb033e3073fc4d3 Mon Sep 17 00:00:00 2001
From: lambdadroid <lambdadroid@gmail.com>
Date: Sun, 3 Sep 2017 19:08:11 +0200
Subject: [PATCH 09/22] ME176C: ASoC: Intel: bytcr_rt5640_jack: Headphone
 detection driver (v2)

---
 sound/soc/intel/Kconfig                    |   4 ++
 sound/soc/intel/boards/Makefile            |   2 +
 sound/soc/intel/boards/bytcr_rt5640.c      |   3 +-
 sound/soc/intel/boards/bytcr_rt5640_jack.c | 101 +++++++++++++++++++++++++++++
 4 files changed, 109 insertions(+), 1 deletion(-)
 create mode 100644 sound/soc/intel/boards/bytcr_rt5640_jack.c

diff --git a/sound/soc/intel/Kconfig b/sound/soc/intel/Kconfig
index b3c7f554ec30..f873a7802fab 100644
--- a/sound/soc/intel/Kconfig
+++ b/sound/soc/intel/Kconfig
@@ -151,6 +151,10 @@ config SND_SOC_INTEL_BYTCR_RT5640_MACH
           Say Y if you have such a device.
           If unsure select "N".
 
+config SND_SOC_INTEL_BYTCR_RT5640_MACH_JACK
+	tristate "ASoC Audio jack driver for Intel Baytrail and Baytrail-CR with RT5640 codec"
+	depends on SND_SOC_INTEL_BYTCR_RT5640_MACH
+
 config SND_SOC_INTEL_BYTCR_RT5651_MACH
         tristate "ASoC Audio driver for Intel Baytrail and Baytrail-CR with RT5651 codec"
 	depends on X86 && I2C && ACPI
diff --git a/sound/soc/intel/boards/Makefile b/sound/soc/intel/boards/Makefile
index 69d2dfaeb00c..de812937d423 100644
--- a/sound/soc/intel/boards/Makefile
+++ b/sound/soc/intel/boards/Makefile
@@ -7,6 +7,7 @@ snd-soc-sst-broadwell-objs := broadwell.o
 snd-soc-sst-bxt-da7219_max98357a-objs := bxt_da7219_max98357a.o
 snd-soc-sst-bxt-rt298-objs := bxt_rt298.o
 snd-soc-sst-bytcr-rt5640-objs := bytcr_rt5640.o
+snd-soc-sst-bytcr-rt5640-jack-objs := bytcr_rt5640_jack.o
 snd-soc-sst-bytcr-rt5651-objs := bytcr_rt5651.o
 snd-soc-sst-cht-bsw-rt5672-objs := cht_bsw_rt5672.o
 snd-soc-sst-cht-bsw-rt5645-objs := cht_bsw_rt5645.o
@@ -28,6 +29,7 @@ obj-$(CONFIG_SND_SOC_INTEL_BXT_RT298_MACH) += snd-soc-sst-bxt-rt298.o
 obj-$(CONFIG_SND_SOC_INTEL_BROADWELL_MACH) += snd-soc-sst-broadwell.o
 obj-$(CONFIG_SND_SOC_INTEL_BDW_RT5677_MACH) += snd-soc-sst-bdw-rt5677-mach.o
 obj-$(CONFIG_SND_SOC_INTEL_BYTCR_RT5640_MACH) += snd-soc-sst-bytcr-rt5640.o
+obj-$(CONFIG_SND_SOC_INTEL_BYTCR_RT5640_MACH_JACK) += snd-soc-sst-bytcr-rt5640-jack.o
 obj-$(CONFIG_SND_SOC_INTEL_BYTCR_RT5651_MACH) += snd-soc-sst-bytcr-rt5651.o
 obj-$(CONFIG_SND_SOC_INTEL_CHT_BSW_RT5672_MACH) += snd-soc-sst-cht-bsw-rt5672.o
 obj-$(CONFIG_SND_SOC_INTEL_CHT_BSW_RT5645_MACH) += snd-soc-sst-cht-bsw-rt5645.o
diff --git a/sound/soc/intel/boards/bytcr_rt5640.c b/sound/soc/intel/boards/bytcr_rt5640.c
index 04b41c09eb5b..ff5ef60f75ff 100644
--- a/sound/soc/intel/boards/bytcr_rt5640.c
+++ b/sound/soc/intel/boards/bytcr_rt5640.c
@@ -733,7 +733,7 @@ static struct snd_soc_dai_link byt_rt5640_dais[] = {
 };
 
 /* SoC card */
-static struct snd_soc_card byt_rt5640_card = {
+struct snd_soc_card byt_rt5640_card = {
 	.name = "bytcr-rt5640",
 	.owner = THIS_MODULE,
 	.dai_link = byt_rt5640_dais,
@@ -744,6 +744,7 @@ static struct snd_soc_card byt_rt5640_card = {
 	.num_dapm_routes = ARRAY_SIZE(byt_rt5640_audio_map),
 	.fully_routed = true,
 };
+EXPORT_SYMBOL(byt_rt5640_card);
 
 static char byt_rt5640_codec_name[16]; /* i2c-<HID>:00 with HID being 8 chars */
 static char byt_rt5640_codec_aif_name[12]; /*  = "rt5640-aif[1|2]" */
diff --git a/sound/soc/intel/boards/bytcr_rt5640_jack.c b/sound/soc/intel/boards/bytcr_rt5640_jack.c
new file mode 100644
index 000000000000..f53c39e1dccf
--- /dev/null
+++ b/sound/soc/intel/boards/bytcr_rt5640_jack.c
@@ -0,0 +1,101 @@
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/acpi.h>
+#include <sound/soc.h>
+#include <sound/jack.h>
+
+extern struct snd_soc_card byt_rt5640_card;
+
+static const struct acpi_gpio_params soc_gpios = { 1, 0, false };
+
+static const struct acpi_gpio_mapping acpi_byt_rt5640_mc_gpios[] = {
+	{ "soc-gpios", &soc_gpios, 1 },
+	{ },
+};
+
+static struct snd_soc_jack_pin byt_rt5640_mc_jack_pin = {
+	.pin	= "Headphone",
+	.mask	= SND_JACK_HEADPHONE,
+};
+
+static struct snd_soc_jack_gpio byt_rt5640_mc_jack_gpio = {
+	.name = "soc",
+	.report = SND_JACK_HEADPHONE,
+	.invert = 1,
+	.debounce_time = 500,
+};
+
+static int snd_byt_rt5640_mc_jack_probe(struct platform_device *pdev)
+{
+	int ret;
+	struct snd_soc_jack *jack;
+	struct snd_soc_card *card = &byt_rt5640_card;
+
+	if (!card->instantiated) {
+		return -EPROBE_DEFER;
+	}
+
+	ret = acpi_dev_add_driver_gpios(ACPI_COMPANION(&pdev->dev),
+			acpi_byt_rt5640_mc_gpios);
+	if (ret) {
+		return ret;
+	}
+
+	jack = devm_kzalloc(&pdev->dev, sizeof(*jack), GFP_KERNEL);
+	if (!jack) {
+		return -ENOMEM;
+	}
+
+	ret = snd_soc_card_jack_new(card, "Headphone", SND_JACK_HEADPHONE, jack,
+					&byt_rt5640_mc_jack_pin, 1);
+	if (ret) {
+		dev_err(&pdev->dev, "Failed to register audio jack: %d\n", ret);
+		return ret;
+	}
+
+	/* Register the new audio jack */
+	ret = snd_device_register(card->snd_card, jack->jack);
+	if (ret) {
+		dev_err(&pdev->dev, "Failed to register audio jack: %d\n", ret);
+		return ret;
+	}
+
+	ret = snd_soc_jack_add_gpiods(&pdev->dev, jack, 1, &byt_rt5640_mc_jack_gpio);
+	if (ret) {
+		dev_err(&pdev->dev, "Failed to add audio jack GPIOs: %d\n", ret);
+		return ret;
+	}
+
+	platform_set_drvdata(pdev, jack);
+	return 0;
+}
+
+static int snd_byt_rt5640_mc_jack_remove(struct platform_device *pdev)
+{
+	struct snd_soc_jack *jack = platform_get_drvdata(pdev);
+
+	snd_soc_jack_free_gpios(jack, 1, &byt_rt5640_mc_jack_gpio);
+	acpi_dev_remove_driver_gpios(ACPI_COMPANION(&pdev->dev));
+	return 0;
+}
+
+static const struct acpi_device_id snd_byt_rt5640_mc_jack_acpi_ids[] = {
+	{ "AMCR0F28", 0 },
+	{},
+};
+MODULE_DEVICE_TABLE(acpi, snd_byt_rt5640_mc_jack_acpi_ids);
+
+static struct platform_driver snd_byt_rt5640_mc_jack_driver = {
+	.driver = {
+		.name = "bytcr_rt5640_jack",
+		.acpi_match_table = ACPI_PTR(snd_byt_rt5640_mc_jack_acpi_ids),
+	},
+	.probe = snd_byt_rt5640_mc_jack_probe,
+	.remove = snd_byt_rt5640_mc_jack_remove,
+};
+
+module_platform_driver(snd_byt_rt5640_mc_jack_driver);
+
+MODULE_DESCRIPTION("ASoC Intel(R) Baytrail CR audio jack driver");
+MODULE_AUTHOR("Lambdadroid <lambdadroid@gmail.com>");
+MODULE_LICENSE("GPL v2");
-- 
2.16.2

