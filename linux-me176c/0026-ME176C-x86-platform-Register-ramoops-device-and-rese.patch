From 5907ac806bf6cc61d83c3fd4f63c58eb09663258 Mon Sep 17 00:00:00 2001
From: lambdadroid <lambdadroid@gmail.com>
Date: Wed, 23 May 2018 19:42:41 +0200
Subject: [PATCH 26/26] ME176C: x86/platform: Register ramoops device and
 reserve memory

---
 arch/x86/kernel/setup.c            |  4 +++
 arch/x86/platform/Makefile         |  1 +
 arch/x86/platform/me176c/Makefile  |  1 +
 arch/x86/platform/me176c/ramoops.c | 48 ++++++++++++++++++++++++++++++
 4 files changed, 54 insertions(+)
 create mode 100644 arch/x86/platform/me176c/Makefile
 create mode 100644 arch/x86/platform/me176c/ramoops.c

diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c
index efbcf5283520..cf25bc7fdd3a 100644
--- a/arch/x86/kernel/setup.c
+++ b/arch/x86/kernel/setup.c
@@ -834,6 +834,8 @@ static void __init simple_udelay_calibration(void)
 	loops_per_jiffy = lpj;
 }
 
+extern void me176c_ramoops_reserve(void);
+
 /*
  * Determine if we were loaded by an EFI loader.  If so, then we have also been
  * passed the efi memmap, systab, etc., so we should use these data structures
@@ -1285,6 +1287,8 @@ void __init setup_arch(char **cmdline_p)
 
 	x86_init.resources.reserve_resources();
 
+	me176c_ramoops_reserve();
+
 	e820__setup_pci_gap();
 
 #ifdef CONFIG_VT
diff --git a/arch/x86/platform/Makefile b/arch/x86/platform/Makefile
index d0e835470d01..53dedc9e4b2e 100644
--- a/arch/x86/platform/Makefile
+++ b/arch/x86/platform/Makefile
@@ -9,6 +9,7 @@ obj-y	+= iris/
 obj-y	+= intel/
 obj-y	+= intel-mid/
 obj-y	+= intel-quark/
+obj-y	+= me176c/
 obj-y	+= olpc/
 obj-y	+= scx200/
 obj-y	+= sfi/
diff --git a/arch/x86/platform/me176c/Makefile b/arch/x86/platform/me176c/Makefile
new file mode 100644
index 000000000000..9c5b32fe7c2f
--- /dev/null
+++ b/arch/x86/platform/me176c/Makefile
@@ -0,0 +1 @@
+obj-y	+= ramoops.o
diff --git a/arch/x86/platform/me176c/ramoops.c b/arch/x86/platform/me176c/ramoops.c
new file mode 100644
index 000000000000..13199b59a83f
--- /dev/null
+++ b/arch/x86/platform/me176c/ramoops.c
@@ -0,0 +1,48 @@
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/platform_device.h>
+#include <linux/pstore_ram.h>
+#include <linux/memblock.h>
+
+#define RAMOOPS_MEM_SIZE	0x100000  /* 1 MiB */
+#define RAMOOPS_MEM_ADDRESS	0x100000
+
+static struct ramoops_platform_data me176c_ramoops_data = {
+	.mem_size	= RAMOOPS_MEM_SIZE,
+	.mem_address	= RAMOOPS_MEM_ADDRESS,
+	.record_size	= 0x40000,
+	.console_size	= 0x20000,
+	.ftrace_size	= 0x20000,
+	.pmsg_size	= 0x40000,
+	.dump_oops	= 1,
+};
+
+static struct platform_device me176c_ramoops = {
+	.name = "ramoops",
+	.dev = {
+		.platform_data = &me176c_ramoops_data,
+	},
+};
+
+static __initdata bool enabled;
+
+void __init me176c_ramoops_reserve(void)
+{
+	int ret = memblock_reserve(RAMOOPS_MEM_ADDRESS, RAMOOPS_MEM_SIZE);
+	if (ret) {
+		pr_err("Failed to reserve memory region from 0x%x to 0x%x: %d",
+			RAMOOPS_MEM_ADDRESS, RAMOOPS_MEM_ADDRESS + RAMOOPS_MEM_SIZE - 1,
+			ret);
+	} else {
+		enabled = true;
+	}
+}
+
+static int __init me176c_ramoops_register(void)
+{
+	if (!enabled)
+		return -ENODEV;
+
+	return platform_device_register(&me176c_ramoops);
+}
+device_initcall(me176c_ramoops_register);
-- 
2.17.1

